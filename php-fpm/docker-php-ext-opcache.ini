zend_extension=opcache.so

; Generally, CLI processes are short-lived, it might not be beneficial to enable opcache for CLI in most cases.
opcache.enable_cli=0

; Allocating a sufficient amount of memory. You might need to adjust this based on your application's needs.
opcache.memory_consumption=${PHP_OPCACHE_MEMORY_CONSUMPTION}

; Increase the buffer size to cache a larger number of interned strings.
opcache.interned_strings_buffer=16

; Setting a higher limit for the number of cached files to cater to large applications.
opcache.max_accelerated_files=10000

; Enable fast shutdown to speed up the process of reclaiming memory at the end of requests.
opcache.fast_shutdown=1

; Enabling file override can allow for performance improvements if your application has file_exists() or is_file() functions.
opcache.enable_file_override=1

; In Docker, the path is not likely to change, hence we keep this disabled.
opcache.revalidate_path=0

; Setting a zero check frequency to ensure the most recent version of scripts are used, considering Docker containers are immutable and any change would come as a new container.
opcache.revalidate_freq=0

; Enabling this can provide a small performance boost by using huge memory pages.
opcache.huge_code_pages=1

; As the Docker environment is controlled, we can safely disable timestamps validation.
opcache.validate_timestamps=0
